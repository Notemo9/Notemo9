// 为函数添加类型注解: 本质上是在为函数的参数和返回值添加类型注解
// 1.函数声明 function fn(参数: 类型，参数: 类型 .): 返回值类型[ 函数体 }
function fn(a:number,b:number):number{
    return a + b
}
fn(1,2)
// 2.函数表达式 let 变量 = function (参数:类型，参数: 类型 .): 返回值类型 函数体 }
let fn1 = function(a:number,b:number):number{
    return a + b
}
fn1(1,2)
// 3.箭头函数(函数表达式) let 变量 = (参数: 类型，参数: 类型...):返回值类型 => 函数体 }
let fn2 = (a:number,b:number):number=>{
    return a + b
}
fn2(1,3)
// fn2('q',1)


// 为函数添加别名类型
type MyTpye=(a:number,b:number)=>number
let fn3:MyTpye = (a,b)=>{
    return a + b
}
fn(1,3)


//函数没有返回值的情况
function fn4(a:number,b:number):void{
    console.log(a+b)
}
fn4(1,3)

// 函数的默认值
// --- 函数参数的默认值
//注意: 函数参数的默认值和可选参数是互斥的
const fn5=(a=10,b=20)=>{
console.log(a,b);
}
fn5()
fn5(1,2)

//函数的可选参数
// --- 函数的可选参数 参数 ?:类型
// 注意: 可选参数必须位于必选参数之后
const fn6=(a?:number,b?:number)=>{
    console.log(a,b);
};
fn6()
fn6(1)
fn6(1,2)



type MyTypes<t> = {
    name:t,
    age:number,
    mobile:string,
}
 
// 编写一个arr2Str函数，作用为把数组转换为字符串，
// 其中数组中既可以包含字符串和数字，分隔符也可以进行自定义，类型为字符串类型，
// 使用样例: arr2Str( [1, 2,3] ，'')"1-2-3"
//          arr2Str( [“4'，'5’]，'&’ ) ->“4&5”

let arr2Str=(a:(number|string)[],b:string):string=>{
    return a.join(b)
}

console.log(arr2Str([1,2,3],'-'));
console.log(arr2Str(['4','5'],'&'));
